# -*- coding: utf-8 -*-
"""Copy of VGG16.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Kt6K0VSsY-2MEw62KJsQt0yAXA_986Zc
"""

from google.colab import drive
drive.mount('/content/drive')

import tensorflow as tf
from tensorflow.keras import models, layers
import matplotlib.pyplot as plt

from sklearn.metrics import confusion_matrix
from sklearn.model_selection import train_test_split

train_d = '/content/drive/MyDrive/DATASET FOR CMFD/TRAIN DATA/TRAIN DATA'
test_d = '/content/drive/MyDrive/DATASET FOR CMFD/TEST DATA /TEST DATA'

batch_size = 64
img_height = 224
img_size=224

train_ds = tf.keras.utils.image_dataset_from_directory(
  train_d,
  validation_split=0.3,
  subset="training",
  seed=123,
  image_size=(img_size,img_size),
  batch_size=batch_size)

test_ds= tf.keras.utils.image_dataset_from_directory(
  test_d,
  seed=123,
  image_size=(img_size,img_size),
  batch_size=64)

val_ds = tf.keras.utils.image_dataset_from_directory(
  train_d,
  validation_split=0.3,
  subset="validation",
  seed=123,
  image_size=(img_size,img_size),
  batch_size=batch_size)

class_names = train_ds.class_names
print(class_names)

import matplotlib.pyplot as plt

plt.figure(figsize=(10, 10))
for images, labels in train_ds.take(1):
  for i in range(9):
    ax = plt.subplot(3, 3, i + 1)
    plt.imshow(images[i].numpy().astype("uint8"))
    plt.title(class_names[labels[i]])
    plt.axis("off")

import matplotlib.pyplot as plt
plt.figure(figsize=(10, 10))
for images, labels in test_ds.take(1):
  for i in range(9):
    ax = plt.subplot(3, 3, i + 1)
    plt.imshow(images[i].numpy().astype("uint8"))
    plt.title(class_names[labels[i]])
    plt.axis("off")

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Conv2D, MaxPool2D , Flatten
vgg16 = tf.keras.applications.VGG16(
    include_top=False,
    weights="imagenet")

inputs = tf.keras.Input(shape=(224, 224, 3))
x = tf.keras.applications.vgg16.preprocess_input(
    inputs, data_format=None)

x = vgg16(x, training=False)
x = tf.keras.layers.GlobalAveragePooling2D()(x)
x = tf.keras.layers.Dropout(0.2)(x)
x = tf.keras.layers.Dense(4096, activation="relu")(x)
outputs = tf.keras.layers.Dense(1, activation="sigmoid")(x)
model = tf.keras.Model(inputs, outputs)

model.summary()

from tensorflow.keras.optimizers import Adam
opt = Adam(learning_rate=5e-5)
model.compile(optimizer=opt, loss=tf.keras.losses.BinaryCrossentropy (from_logits=False), metrics=['accuracy'])
from keras.callbacks import ModelCheckpoint, EarlyStopping
cb = ModelCheckpoint("Vgg16_1.h5", monitor='val_accuracy', verbose=1, save_best_only=True, save_weights_only=False, mode='auto', period=1)

history = model.fit(train_ds,epochs=15, validation_data=val_ds, callbacks = cb)

import numpy as np
import tensorflow as tf

predictions = np.array([])
labels =  np.array([])
i=0;
for x, y in test_ds:
    i+=1
    z=model.predict(x)
    xx = np.round(z)
    prediction=np.concatenate([predictions,xx[:,-1]])
    labels = np.concatenate([labels, y.numpy()])

evaluation = model.evaluate(test_ds, return_dict=True)

acc = history.history['accuracy']
val_acc = history.history['val_accuracy']

loss = history.history['loss']
val_loss = history.history['val_loss']

epochs_range = range(15)

plt.figure(figsize=(8, 8))
plt.subplot(1, 2, 1)
plt.plot(epochs_range, acc, label='Training Accuracy')
plt.plot(epochs_range, val_acc, label='Validation Accuracy')
plt.legend(loc='lower right')
plt.title('Training and Validation Accuracy')

plt.subplot(1, 2, 2)
plt.plot(epochs_range, loss, label='Training Loss')
plt.plot(epochs_range, val_loss, label='Validation Loss')
plt.legend(loc='upper right')
plt.title('Training and Validation Loss')
plt.show()

labels

prediction

from sklearn.metrics import confusion_matrix
cf_matrix = confusion_matrix(labels,prediction)
import seaborn as sns
sns.heatmap(cf_matrix, annot=True)

import sklearn
print(sklearn.metrics.classification_report(prediction,labels))

